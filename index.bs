<pre class='metadata'>
Title: User Preference Locale Info Client Hints Headers
Shortname: user-locale-client-hints
Level: 1
Status: CG-DRAFT
Group: WICG
Repository: WICG/user-locale-client-hints
URL: https://github.com/romulocintra/user-locale-client-hints
Editor: Romulo Cintra, Igalia https://igalia.com, rcintra@igalia.com
Editor: Ujjwal Sharma, Igalia https://igalia.com, usharma@igalia.com
!Tests: <a href=https://github.com/w3c/web-platform-tests/tree/master/user-locale-client-hints>web-platform-tests user-locale-client-hints/</a> (<a href=https://github.com/w3c/web-platform-tests/labels/user-locale-client-hints>ongoing work</a>)
Abstract: This specification defines a group of <code>Client Hints</code> headers and a homologous <code>Javascript API</code>, that will allow a reliable way to access User Locale Preferences information from the Web Platform to help craft better user experiences. Allowing web developers to access this information would allow them to improve the accessibility and usability of their websites, and bring the user experience of web applications closer to that of native applications.
Markup Shorthands: markdown yes
</pre>
<pre class=biblio>
{
  "CLIENT-HINTS": {
    "authors": ["Ilya Grigorik", "Yoav Weiss"],
    "href": "https://datatracker.ietf.org/doc/rfc8942/",
    "title": "HTTP Client Hints",
    "status": "RFC - Experimental (February 2021; No errata)",
    "publisher": "IETF httpbis-WG"
  },
  "draft-ietf-httpbis-header-structure-19": {
    "authors": ["Mark Nottingham", "Poul-Henning Kamp"],
    "href": "https://tools.ietf.org/html/draft-ietf-httpbis-header-structure-19",
    "title": "Structured Field Values for HTTP",
    "status": "ID",
    "publisher": "IETF httpbis-WG"
  }
}
</pre>


Introduction {#intro}
=====================

*This section is non-normative*.

User preferences are often system-wide settings (such as in Android, macOS, or Windows). Operating systems allow the user to specify custom overrides for settings such as:

  * Hour cycle (24-hour or 12-hour time)
  * Calendar system
  * Measurement unit preferences (metric or imperial)
  * Date/time patterns
  * Number separators (comma or period)

However, thereâ€™s currently no reliable way to access this information from the Web Platform to help craft better user experiences. Allowing web developers to access this information would allow them to improve the accessibility and usability of their websites, and bring the user experience of web applications closer to that of native applications.

We propose to address the above use cases by using a group of [`Client Hints`](#client-hints) headers and a homologous [Javascript API](#), both will be responsible for exposing and negotiating the exchange of user preferences from the OS to the required environment.

We are proposing [Unicode Extensions for BCP 47](https://cldr.unicode.org/index/bcp47-extension) or compatible as the main reference for the base mechanism for delivering user locale preferences. The goal is to allow the handling of user preferences consistently across the industry.

So, we will define a new standard `Locale-Preferences` Client Hints and `navigator.localePreferences`, that would map the user locale preferences using the following steps:

  0.  Validate if there is any fingerprinting mechanism and if OS preferences are allowed to be exposed
  1.  Read the available OS preferences
  2.  For each value compare it against the default  value for the given locale from ICU/CLDR or a list of user preferences to compare against
  3.  If the _user preference_ value differs, return the value
  4.  If the  _user preference_ value is the same, return empty value

As an alternative instead of returning `undefined` or empty values, we could try to do an intent of resolving the missing information using [Add Likely Subtags ](https://www.unicode.org/reports/tr35/#Likely_Subtags) algorithm and merge values set by the user in their user locale preferences. 

Conceptually both strategies would work but the second won't inform each preference set by the user.

The following table suggests common user preferences [#416](https://github.com/tc39/ecma402/issues/416#issue-574957588) to be used, and does the correlation from  `Locale-Preferences` Client Hints and `navigator.localePreferences` to extension keys if they exist, or other values in case table is extended by user demand.

<pre class=simpledef>
first row: some info
second row: different info
second row: merged with the previous row
</pre>


| Locale Preferences Name | Extension Key/Unicode Source | Example Values | Description |
| ----------------------- | -------| ------ |-----|
| "calendar"              |  `ca`  | buddhist, chinese...| [Calendar system / Calendar algorithm](https://github.com/unicode-org/cldr/blob/main/common/bcp47/calendar.xml) | 
| "currencyFormat"        |  `cf`  | standard, account | Currency Format style, whether to use accounting currency format |
| "collation"             |  `co`  | standard, search, phonetic... | Collation type, sort order |
| "currencyCode"          |  `cu`  | 	ISO 4217 codes | Currency type |
| "emojiStyle"            |  `em`  | emoji , text, default | Emoji presentation style |
| "firstDayOfTheWeek"      |  `fw`  | "sun", "mon" ... "sat" | First day of week  |
| "hourCycle"             |  `hc`  | h12 , h23, h11, h24 | Hour cycle, i.e., 12-hour or 24-hour clock |
| "measurementSystem"     |  `ms`  | metric , ussystem , uksystem | Measurement system |
| "measurementUnit"       |  `mu`  | celsius , kelvin , fahrenhe | [Measurement units currently only temperature](https://github.com/unicode-org/cldr/blob/7942fd82f7e673eb0b27f0bf2025a31572135d95/common/bcp47/measure.xml#L16) |
| "numberingSystem"       |  `nu`  | Unicode script subtag(arabext...)    <br> | Numbering system |
| "timeZone"              |  `tz`  | Unicode short time zone IDs | Time zone |
| "region"                |  `rg`  | [Unicode Region Subtag](https://unicode.org/reports/tr35/tr35.html#unicode_region_subtag) | Region override |



Other user preferences that might be included based on user research about OS preferences inputs and [#1308329](https://bugzilla.mozilla.org/show_bug.cgi?id=1308329), most of them don't have a 1:1 match with BCP47 extension keys, however, they are available in ICU/CLDR
 - number separator (grouping/decimal)
 - measurement units (Metric, US, UK)
 - date formats short/medium/long/full
 - time formats short/medium/long/full
 - dayperiod names
 - time display with/without seconds
 - flash the time separators
 - show dayPeriod
 - show the day of the week
 - show date

> Note: The table and list are recommendations, they need to be validated and agreed by security teams and stakeholders, but from now on using them as a reference for the proposal.



Examples {#examples}
--------

*This section is non-normative*.

1. The client makes an initial request to the server:

```http
GET / HTTP/1.1
Host: example.com
```

2. The server responds, telling the client via an `Accept-CH` header (Section 2.2.1 of [[!RFC8942]]) along with the initial response with `Sec-CH-Locale-Preferences-numberingSystem` and the `Sec-CH-Locale-Preferences-timeZone` Client Hints: 

```http
HTTP/1.1 200 OK
Content-Type: text/html
Accept-CH: Sec-CH-Locale-Preferences-numberingSystem, Sec-CH-Locale-Preferences-timeZone
```

3. Then subsequent requests to https://example.com will include the following request headers in case the user sets `numberingSystem` and `timeZone` values:

```http
GET / HTTP/1.1
Host: example.com
Sec-CH-Locale-Preferences-calendar:"buddhist"
Sec-CH-Locale-Preferences-timeZone: "Africa/Lagos"
```

In case the user did not set any `Locale-Preferences` for accepted values, request headers return empty
```http
GET / HTTP/1.1
Host: example.com
Sec-CH-Locale-Preferences-calendar:""
Sec-CH-Locale-Preferences-timeZone: ""
```

4. The server can then tailor the response to the client's preferences accordingly.

Use Cases {#examples}
--------

User Preference Locale Info {#user-preference-locale-info}
=====================

`Sec-CH-Prefers-Locale-calendar`     
--------------------------------

`Sec-CH-Prefers-Locale-currencyFormat`   
--------------------------------
`Sec-CH-Prefers-Locale-collation`
--------------------------------        
`Sec-CH-Prefers-Locale-currencyCode`
--------------------------------     
`Sec-CH-Prefers-Locale-emojiStyle`
--------------------------------       
`Sec-CH Prefers-Locale-firstDayOfTheWeek`
--------------------------------
`Sec-CH-Prefers-Locale-hourCycle`
--------------------------------        
`Sec-CH-Prefers-Locale-measurementSystem`
--------------------------------
`Sec-CH-Prefers-Locale-measurementUnit`
--------------------------------  
`Sec-CH-Prefers-Locale-numberingSystem`
--------------------------------  
`Sec-CH-Prefers-Locale-timeZone`
--------------------------------        
`Sec-CH-Prefers-Locale-region`
--------------------------------        
`Sec-CH-Prefers-Locale-dateFormat`       


Security and Privacy Considerations {#security-and-privacy-considerationd}
=====================



See https://github.com/tabatkins/bikeshed to get started.

